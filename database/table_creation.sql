-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public.student DROP CONSTRAINT IF EXISTS student_fkey;

ALTER TABLE IF EXISTS public.student DROP CONSTRAINT IF EXISTS contact_fkey;

ALTER TABLE IF EXISTS public.employee DROP CONSTRAINT IF EXISTS employee_fkey;

ALTER TABLE IF EXISTS public.call DROP CONSTRAINT IF EXISTS university_fkey;

ALTER TABLE IF EXISTS public.admin DROP CONSTRAINT IF EXISTS admin_fkey;

ALTER TABLE IF EXISTS public.application DROP CONSTRAINT IF EXISTS student_id;

ALTER TABLE IF EXISTS public.application DROP CONSTRAINT IF EXISTS call_id;

ALTER TABLE IF EXISTS public.international_application DROP CONSTRAINT IF EXISTS application_fkey;

ALTER TABLE IF EXISTS public.national_application DROP CONSTRAINT IF EXISTS application_fkey;

ALTER TABLE IF EXISTS public.active_mobility DROP CONSTRAINT IF EXISTS application_fkey;



DROP TABLE IF EXISTS public.person CASCADE;

CREATE TABLE IF NOT EXISTS public.person
(
    "ID" integer NOT NULL,
    password bytea NOT NULL,
    type_document doc_en NOT NULL,
    name character varying NOT NULL,
    lastname character varying NOT NULL,
    birth date NOT NULL,
    sex sex_en NOT NULL,
    birth_place text NOT NULL,
    country character varying NOT NULL,
    city character varying NOT NULL,
    phone text NOT NULL,
    email character varying NOT NULL,
    address character varying NOT NULL,
    age smallint NOT NULL,
    ethnicity ethnicity_en NOT NULL DEFAULT 'None',
    headquarter headquarter_en NOT NULL,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.student CASCADE;

CREATE TABLE IF NOT EXISTS public.student
(
    "ID" integer NOT NULL,
    "PAPA" smallint NOT NULL,
    "PAPI" smallint NOT NULL,
    "PA" smallint NOT NULL,
    "PBM" smallint NOT NULL,
    advance smallint NOT NULL,
    faculty faculty_en NOT NULL,
    major major_en NOT NULL,
    calls_done integer[] NOT NULL,
    current_applications integer[] NOT NULL,
    is_enrolled boolean NOT NULL,
    date_banned_mobility date NOT NULL DEFAULT '2000-01-01',
    is_banned_behave_un boolean NOT NULL,
    admission admission_en NOT NULL,
    study_level study_level_en NOT NULL,
    num_semesters smallint NOT NULL,
    contact_id integer,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.employee CASCADE;

CREATE TABLE IF NOT EXISTS public.employee
(
    "ID" integer NOT NULL,
    dependence dependence_en NOT NULL,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.call CASCADE;

CREATE TABLE IF NOT EXISTS public.call
(
    "ID" integer NOT NULL,
    university_id integer NOT NULL,
    active boolean NOT NULL,
    begin_date date NOT NULL,
    deadline date NOT NULL,
    min_advance smallint NOT NULL,
    min_papa smallint NOT NULL,
    format format_en NOT NULL,
    study_level study_level_en[] NOT NULL,
    year smallint NOT NULL,
    semester semester_en NOT NULL,
    language language_en NOT NULL,
    description character varying NOT NULL,
    available_slots smallint NOT NULL,
    note text,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.admin CASCADE;

CREATE TABLE IF NOT EXISTS public.admin
(
    "ID" integer NOT NULL,
    dependence dependence_en NOT NULL,
    "employees_ID" integer[] NOT NULL,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.application CASCADE;

CREATE TABLE IF NOT EXISTS public.application
(
    "ID" integer NOT NULL,
    call_id integer NOT NULL,
    student_id integer NOT NULL,
    doc_id_student text NOT NULL,
    approved boolean,
    comment_approved text,
    is_extension boolean NOT NULL,
    approve_documents boolean,
    comment_docs text,
    destination_faculty text NOT NULL,
    destination_program text NOT NULL,
    dest_contact_email text NOT NULL,
    dest_contact_name text NOT NULL,
    dest_contact_position text NOT NULL,
    dest_contact_cellphone text NOT NULL,
    starting_date date NOT NULL,
    ending_date date NOT NULL,
    info_courses json NOT NULL,
    diseases text NOT NULL,
    medication text NOT NULL,
    other_documents json NOT NULL,
    grades_certificate text NOT NULL,
    capacitation_session timestamp without time zone[],
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.university CASCADE;

CREATE TABLE IF NOT EXISTS public.university
(
    "ID" integer NOT NULL,
    name text NOT NULL,
    webpage text NOT NULL,
    region region_en NOT NULL,
    country text NOT NULL,
    city text NOT NULL,
    academic_offer text NOT NULL,
    exchange_info text NOT NULL,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.international_application CASCADE;

CREATE TABLE IF NOT EXISTS public.international_application
(
    application_id integer NOT NULL,
    motivation_letter text NOT NULL,
    language_doc text NOT NULL,
    economic_letter text NOT NULL,
    PRIMARY KEY (application_id)
);

DROP TABLE IF EXISTS public.contact_person CASCADE;

CREATE TABLE IF NOT EXISTS public.contact_person
(
    "ID" integer NOT NULL,
    name text NOT NULL,
    relationship text NOT NULL,
    cellphone text NOT NULL,
    email text NOT NULL,
    PRIMARY KEY ("ID")
);

DROP TABLE IF EXISTS public.national_application CASCADE;

CREATE TABLE IF NOT EXISTS public.national_application
(
    application_id integer NOT NULL,
    sigueme_document text NOT NULL,
    payment_tuition text NOT NULL,
    eps_certificate text NOT NULL,
    economic_letter text NOT NULL,
    PRIMARY KEY (application_id)
);

DROP TABLE IF EXISTS public.active_mobility CASCADE;

CREATE TABLE IF NOT EXISTS public.active_mobility
(
    application_id integer NOT NULL,
    presentation_letter text NOT NULL,
    welcoming_letter text,
    arrival_form text,
    stay_cerficate text,
    health_certificate text,
    faculty_letter text,
    cancelation_letter text,
    academic_transcript text,
    outbreaks text[],
    cancelled boolean NOT NULL DEFAULT false,
    PRIMARY KEY (application_id)
);

ALTER TABLE IF EXISTS public.student
    ADD CONSTRAINT student_fkey FOREIGN KEY ("ID")
    REFERENCES public.person ("ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "fki_ID_student"
    ON public.student("ID");


ALTER TABLE IF EXISTS public.student
    ADD CONSTRAINT contact_fkey FOREIGN KEY (contact_id)
    REFERENCES public.contact_person ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT employee_fkey FOREIGN KEY ("ID")
    REFERENCES public.person ("ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "fki_ID_employee"
    ON public.employee("ID");


ALTER TABLE IF EXISTS public.call
    ADD CONSTRAINT university_fkey FOREIGN KEY (university_id)
    REFERENCES public.university ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.admin
    ADD CONSTRAINT admin_fkey FOREIGN KEY ("ID")
    REFERENCES public.person ("ID") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "fki_ID_admin"
    ON public.admin("ID");


ALTER TABLE IF EXISTS public.application
    ADD CONSTRAINT student_id FOREIGN KEY (student_id)
    REFERENCES public.student ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.application
    ADD CONSTRAINT call_id FOREIGN KEY (call_id)
    REFERENCES public.call ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.international_application
    ADD CONSTRAINT application_fkey FOREIGN KEY (application_id)
    REFERENCES public.application ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.national_application
    ADD CONSTRAINT application_fkey FOREIGN KEY (application_id)
    REFERENCES public.application ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.active_mobility
    ADD CONSTRAINT application_fkey FOREIGN KEY (application_id)
    REFERENCES public.application ("ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;