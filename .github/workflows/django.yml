name: Django CI

on:
  push:
    branches: [ "testing" ]
  pull_request:
    branches: [ "testing" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Testing
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Decode SIA files
      env:
        FILES_PW: ${{ secrets.FILES_PW }}
      run: |
        #!/bin/bash
        set -e  # Exit on errors

        source_dir="$GITHUB_WORKSPACE/django_project/data/test_files_gpg"
        target_dir="$GITHUB_WORKSPACE/django_project/data/test_files"

        for file in "$source_dir"/*; do
          if [[ -f "$file" ]]; then
            filename="${file##*/}"  # Extract filename
            gpg --quiet --batch --yes --decrypt --passphrase=$FILES_PW \
              --output "$target_dir/$filename" "$file"
            echo "Encrypted $filename"
          fi
        done
        
        ls -l $source_dir
        ls -l $target_dir

    - name: Decode credentials
      env:
        GOOGLE_API_PW: ${{ secrets.GOOGLE_API_PW }}
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase=$GOOGLE_API_PW \
        --output $GITHUB_WORKSPACE/django_project/credentials.json $GITHUB_WORKSPACE/django_project/credentials.json.gpg
    - name: Run Tests
      env:
        DATABASE_ENGINE: ${{ secrets.DATABASE_ENGINE }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      run: |
        cd django_project && python manage.py test
